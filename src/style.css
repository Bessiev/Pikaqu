*{box-sizing: border-box;margin: 0;padding: 0;}
*::before, *::after{box-sizing: border-box;}

body{
    background: #ffe600;
    min-height: 100vh;
}
.skin{
    position: relative;
}
.nose{
    border: 10px solid black;
    border-color: black transparent transparent;/*黑色三角，旁边为透明色*/
    border-bottom: none;
    width: 0px;
    height: 0px;
    position: relative;
    left: 50%;
    top: 145px;
    margin-left: -10px;/*保证鼻子在屏幕中间，即往左移自身宽度的一半*/
    z-index: 10;/*防止被上嘴唇边遮住*/
}

/*鼻子晃动动画*/
@keyframes wave{
    0%{
        transform: rotate(0deg);    
    }
    33%{
        transform: rotate(5deg);    
    }
    66%{
        transform: rotate(-5deg);    
    }
    100%{
        transform: rotate(0deg);    
    }

}
.nose:hover{
    transform-origin: center bottom;/*动画以底部为基准*/
    animation: wave 300ms infinite linear;
}
/*鼻子上的圆弧*/
.yuan{
    position: absolute;
    width: 20px;
    height: 6px;
    top: -16px;
    left: -10px;
    border-radius: 10px 10px 0 0;
    background: black;
}

.eye {
    border: 2px solid #000;
    width: 64px;
    height: 64px;
    position: absolute;
    left: 50%;
    top: 100px;
    margin-left: -32px;
    background: #2e2e2e;
    border-radius: 50%;
}

/*伪元素做眼白*/
.eye::before{
    content: '';
    display: block;/*原本默认为span的内联元素，设置为块状元素的方式显示*/
    border: 3px solid #000;
    width: 30px;
    height: 30px;
    background: #fff;
    border-radius: 50%;
    position: relative;/*眼睛大小为固定的，因此可以用相对、也可用绝对*/
    left: 4px;
    top: 2px;
}
.eye.left{
    transform: translateX(-100px);/*margin已经用于定位，此时用translateX调整眼睛位置*/
}
.eye.right{
    transform: translateX(100px);
}
.mouth{
    width: 200px;
    height: 200px;
    position: absolute;
    left: 50%;
    top: 170px;
    margin-left: -100px;
}

/*上嘴唇*/
.mouth .up{
    position: relative;
    top: -20px;
    z-index: 1;
}
.mouth .up .lip{
    background: #ffe600;
    border: 3px solid black;
    height: 30px;
    width: 100px;
    border-top-color: transparent;
    border-right-color: transparent;
    position: relative;
    position: absolute;
    left: 50%;
    margin-left: -50px;
}
.mouth .up .lip.left{
    border-radius: 0 0 0 50px;
    transform: rotate(-15deg) translateX(-53px);
}

.mouth .up .lip.right{
    border-radius: 0 0 50px 0px;
    transform: rotate(15deg) translateX(53px);
}


/*伪元素用于遮住上嘴唇圆角矩形的边*/

.mouth .up .lip::before{
  content: '';
  display: block;
  width: 7px;
  height: 30px;
  position: absolute;
  bottom: 0;
  background: #ffe600;
}
.mouth .up .lip.left::before{
  right: -6px;
}
.mouth .up .lip.right::before{
  left: -6px;
}

/*下嘴唇*/
.mouth .down{
  height: 180px;
  position: absolute;
  top: 5px;
  width: 100%;
  overflow: hidden;
}
.mouth .down .yuan1{
  border: 3px solid black;
  width: 150px;
  height: 1000px;
  position: absolute;
  bottom: 0;
  left: 50%;
  margin-left: -75px;
  border-radius: 75px/300px;
  background: #9b000a;
  overflow: hidden;
}
.mouth .down .yuan1 .yuan2{
  width: 200px;
  height: 300px;
  background: #ff485f;
  position: absolute;
  bottom: -155px;
  left: 50%;
  margin-left: -100px;
  border-radius: 100px;

}

/*脸颊*/
.face{
  position: absolute;
  left: 50%;
  border: 3px solid black;
  width: 88px;
  height: 88px;
  top: 200px;
  margin-left: -44px;
  z-index: 3;
}
.face > img{
  position: absolute;
  top: 50%;
  left: 50%;
}
.face.left{
  transform: translateX(-180px);
  background: #ff0000;
  border-radius: 50%;
}
.face.left > img{
  transform: rotateY(180deg);
  transform-origin: 0 0;
}
.face.right{
  transform: translateX(180px);
  background: #ff0000;
  border-radius: 50%;
}

/*
1.inline（行内元素）:
    使元素变成行内元素，拥有行内元素的特性，即可以与其他行内元素共享一行，不会独占一行. 
    不能更改元素的height，width的值，大小由内容撑开. 
    可以使用padding上下左右都有效，margin只有left和right产生边距效果，但是top和bottom就不行.
2.block（块级元素）:
    使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度. 
    能够改变元素的height，width的值. 
    可以设置padding，margin的各个属性值，top，left，bottom，right都能够产生边距效果.
3.inline-block（融合行内于块级）:
    结合了inline与block的一些特点，结合了上述inline的第1个特点和block的第2,3个特点.
    用通俗的话讲，就是不独占一行的块级元素*/

/*1
    relative:相对于原来的位置移动，元素设置此属性之后仍然处在文档流中，不影响其他元素布局
    absolute:元素会脱离文档流，如果设置偏移量，会影响其他元素的位置定位
    (1)在父元素没有设置相对位置时，脱离文档流以后，left和top的值是相对于整个页面左上角的位置
    (2)在父元素设置相对位置时，脱离文档流以后，left和top的值是相对于最近一个不是static的父元素的左上角的位置,2中此时，相对于body定位*/

/*relative:
    定位是相对于自身位置定位(设置偏移量的时候，会相对于自身所在的位置偏移)。设置了 relative 的元素仍然处在文档流中，元素的宽高不变，设置偏移量也不会影响
其他元素的位置。最外层容器设置为 relative 定位，在没有设置宽度的情况下，宽度是整个
浏览器的宽度。
absolute:
    定位是相对于离元素最近的设置了绝对或相对定位的父元素决定的，如果没有
父元素设置绝对或相对定位，则元素相对于根元素即 html 元素定位。设置了 absolute 的元
素脱离了文档流，元素在没有设置宽度的情况下，宽度由元素里面的内容决定。脱离后原
来的位置相当于是空的，下面的元素会来占据位置。*/


/*1.static总结*/
/*(1).static是默认值，即没有定位，元素在正常的流中，top，right，bottom，left和z-index属性都无效*/
/*(2).如果不对父元素设置高度，那么父元素的高度就是所有元素高度之和*/

/*1.relative总结*/
/*(1).设置relative后，top、bottom、left、right的设置才会生效*/
/*(2).元素便宜以后，他本来的位置还是存在，他后面的元素还是以他原来的位置紧挨着进行定位*/
/*(3).偏移以后会产生覆盖，可修改z-index的值来改变覆盖位置*/
/*(4).设置相对定位以后，如果不对父元素设置高度，由于元素不偏离文档流，父元素的高度就是所有元素高度之和*/
/*(5).设置相对定位后，元素宽度不发生改变*/

/*2.absolute总结*/
/*(1).绝对定位的元素会脱离文档流，原来的位置不见了，后面的元素补上*/
/*(2).绝对定位的元素位置是相对于最近的已定位的父元素（即改父元素不是static）来进行定位，若没有已经进行定位了的元素，那就以网页左上角，即body元素进行定位*/
/*(3).偏移以后会产生覆盖，可修改z-index的值来改变覆盖位置*/
/*(4).设置相对绝对定位以后，如果不对父元素设置高度，由于元素偏离文档流，父元素的高度就是除绝对定位元素以外其他所有元素高度之和*/
/*(5).该元素设置绝对定位后，元素宽度由内容长度绝定，如果父元素设置了绝对定位，宽度就由其中最大的元素决定*/

/*3.fixed总结*/
/*(1).fixed本质上是一种绝对定位，不给元素预留空间*/
/*(2).通过指定相对于浏览器窗口置来制定元素的空间，滚动的时候，元素不动，固定在某个位置*/
/*(3).设置相对固定定位以后，如果不对父元素设置高度，由于元素偏离文档流，父元素的高度就是除固定定位元素以外其他所有元素高度之和*/
/*用于网站顶端固定导航，底端固定广告*/

/*4.z-index总结*/
/*(1).仅对定位元素有效（relative，absolute，fixed）*/
/*(2).只能比较同级元素*/
/*(3).z-index越大 在越上面*/

/*5.margin*/
/*(1).margin会使文档流中的位置发生偏移，他会放弃之前占据的空间，紧随其后的会填充这一部分，如对box2设置了margin向上30px，box3就业向上30px*/
/*(2).relative的元素发生偏移，如对box1设置了relative，box1会偏移，但是他原来的那个位置偏移部分变成空白，不会被box2占据*/

/*6.使用margin和决定定位将固定宽高的管素在页面上垂直水平居中*/

/*7.当container未设置宽度时，其宽度和父元素body-border的一致，而box123和container的宽度一致，*/

/*8.inner带着box123以其脱离文档流，则无法支撑起container，inner中所有元素为脱离文档流，则用里面最宽的宽度*/